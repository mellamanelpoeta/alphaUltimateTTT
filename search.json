[
  {
    "objectID": "Python implementation/constants.html",
    "href": "Python implementation/constants.html",
    "title": "Constants",
    "section": "",
    "text": "0-80 squares, 81-89 result of each subgame, 90 next symbol, 91 subgame constraint, 92 result of uttt\n\nSIZE = 93\nNEXT_SYMBOL_INDEX = 90\nCONSTRAINT_INDEX = 91\nRESULT_INDEX = 92\n\n\n\n1 is associated to X, 2 to O and 3 to draw. Unconstrained state is 9.\n\nX_STATE_VALUE = 1\nO_STATE_VALUE = 2\nDRAW_STATE_VALUE = 3\nUNCONSTRAINED_STATE_VALUE = 9\n\n\n\nMapping from matrix index to array index.\n\nMAPPING ={\n#First subgame\n(1,1): 0, (1,2): 1, (1,3): 2, \n(2,1):3, (2,2): 4, (2,3): 5,\n(3,1):6, (3,2):7, (3,3):8, \n\n#Second subgame\n(1,4):9, (1,5):10, (1,6):11, \n(2,4):12, (2,5):13, (2,6):14,\n(3,4):15, (3,5):16, (3,6):17,\n\n#Third subgame\n(1,7):18, (1,8):19, (1,9):20, \n(2,7):21, (2,8):22, (2,9):23,\n(3,7):24, (3,8):25, (3,9):26,\n\n#Fourth subgame\n(4,1):27, (4,2):28, (4,3):29, \n(5,1):30, (5,2):31, (5,3):32,\n(6,1):33, (6,2):34, (6,3):35,\n\n#Fifth subgame\n(4,4):36, (4,5):37, (4,6):38, \n(5,4):39, (5,5):40, (5,6):41,\n(6,4):42, (6,5):43, (6,6):44,\n\n#Sixth subgame\n(4,7):45, (4,8):46, (4,9):47, \n(5,7):48, (5,8):49, (5,9):50,\n(6,7):51, (6,8):52, (6,9):53,\n\n#Seventh subgame\n(7,1):54, (7,2):55, (7,3):56, \n(8,1):57, (8,2):58, (8,3):59,\n(9,1):60, (9,2):61, (9,3):62,\n\n#Eighth subgame\n(7,4):63, (7,5):64, (7,6):65, \n(8,4):66, (8,5):67, (8,6):68,\n(9,4):69, (9,5):70, (9,6):71,\n\n#Ninth subgame\n(7,7):72, (7,8):73, (7,9):74, \n(8,7):75, (8,8):76, (8,9):77,\n(9,7):78, (9,8):79, (9,9):80,\n}",
    "crumbs": [
      "Python implementation",
      "Constants"
    ]
  },
  {
    "objectID": "Python implementation/ultimatetictactoe.html",
    "href": "Python implementation/ultimatetictactoe.html",
    "title": "Ultimate Tic Tac Toe",
    "section": "",
    "text": "source\n\nUltimateTicTacToe\n\n UltimateTicTacToe (state:[]=None)\n\nThe state is a list of 93 elements.\nThe first 81 elements are the state of each square, 0 for empty, 1 for X and 2 for O.\nThe next 9 elements are the result of each subgame: 0 while being played, 1 is win for X, 2 is a win for O and 3 for draw.\nThe next element is the next symbol to play: 1 for X and 2 for O.\nThe next element is the index of the subgame that is constrained, 9 for no subgame constraint.\nThe last element is the result of the UTTT: 0 while being played, 1 is win for X, 2 is a win for O and 3 for draw.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nstate\n[]\nNone\nIf no state is given, it generates a new one.\n\n\n\n\nsource\n\n\nuttt._get_legal_indexes\n\n uttt._get_legal_indexes ()\n\nReturns a list with the indexes of the legal moves.\n\nsource\n\n\nuttt._verify_move\n\n uttt._verify_move (move:alphaUltimateTTT.Move.Move)\n\nVerifies if the move is valid: if the index is in the valid range, if the subgame is not over, if the index is not already taken and if the subgame is not constrained. If it is not, it raises an exception.\n\n\n\n\nType\nDetails\n\n\n\n\nmove\nMove\nVerifies if the move is valid.\n\n\n\n\nsource\n\n\nuttt._update_state\n\n uttt._update_state (move:alphaUltimateTTT.Move.Move)\n\nUpdates the state of the game after a move. It also verifies if the subgame and the game are over.\n\n\n\n\nType\nDetails\n\n\n\n\nmove\nMove\nUpdates the state of the game after a move.\n\n\n\n\nsource\n\n\nuttt._verify_subgame_result\n\n uttt._verify_subgame_result (move)\n\nVerifies if the subgame is over and updates the state of the subgame.\n\nsource\n\n\nuttt._verify_game_result\n\n uttt._verify_game_result (move)\n\nVerifies if the game is over and updates the state of the game.\n\nsource\n\n\nuttt._make_move\n\n uttt._make_move (move:alphaUltimateTTT.Move.Move, verify:bool=True)\n\nMakes a move in the game. It verifies if the move is valid\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nmove\nMove\n\nReceives a move and updates the state of the game.\n\n\nverify\nbool\nTrue\nA boolean to verify if the move is valid.\n\n\n\n\nsource\n\n\nuttt.play\n\n uttt.play (matrix_index:int)\n\nPlays the game. Receives a matrix index and makes a move in the corresponding state index.\n\nsource\n\n\nutttError\nCommon base class for all non-exit exceptions.",
    "crumbs": [
      "Python implementation",
      "Ultimate Tic Tac Toe"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "alphaUltimateTTT",
    "section": "",
    "text": "This file will become your README and also the index of your documentation.",
    "crumbs": [
      "alphaUltimateTTT"
    ]
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "alphaUltimateTTT",
    "section": "Install",
    "text": "Install\n Building…",
    "crumbs": [
      "alphaUltimateTTT"
    ]
  },
  {
    "objectID": "Game/ultimatettt.html",
    "href": "Game/ultimatettt.html",
    "title": "Ultimate Tic Tac Toe",
    "section": "",
    "text": "source\n\nMove\n\n Move (symbol:int, index:int)\n\nA move contains the symbol (represented as an int) and the index (int from 0 to 80) where the symbol will be placed.\n\n\n\n\nType\nDetails\n\n\n\n\nsymbol\nint\nX_STATE_VALUE = 1 or O_STATE_VALUE = 2\n\n\nindex\nint\nint from 0 to 80\n\n\n\n\nsource\n\n\nUltimateTicTacToe\n\n UltimateTicTacToe (state:[]=None)\n\nThe state is a list of 93 elements.\nThe first 81 elements are the state of each square, 0 for empty, 1 for X and 2 for O.\nThe next 9 elements are the result of each subgame: 0 while being played, 1 is win for X, 2 is a win for O and 3 for draw.\nThe next element is the next symbol to play: 1 for X and 2 for O.\nThe next element is the index of the subgame that is constrained, 9 for no subgame constraint.\nThe last element is the result of the UTTT: 0 while being played, 1 is win for X, 2 is a win for O and 3 for draw.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nstate\n[]\nNone\nIf no state is given, it generates a new one.\n\n\n\n\nsource\n\n\nutttError\nCommon base class for all non-exit exceptions.\n\nsource\n\n\nuttt.play\n\n uttt.play (matrix_index:int)\n\nPlays the game. Receives a matrix index and makes a move in the corresponding state index.\n\nstate = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 2, 1, 0, 2, 0, 0, 0, 0, 1, 2, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 2, 0, 0, 1, 5, 0]\nuttt = UltimateTicTacToe(state=state)\n\n\nuttt.play(47)\n\nUltimateTicTacToe(\n  subgames:\n    1 2 3   4 5 6   7 8 9\n  1 • • • │ · · · │ · · ·\n  2 • • • │ O · · │ O O ·\n  3 • • • │ · · · │ · · ·\n    —————————————————————\n  4 · · X │ · · X │ X · ·\n  5 · X · │ · X O │ · X O\n  6 X · · │ X · O │ X · ·\n    —————————————————————\n  7 · · · │ · · · │ · · ·\n  8 O O O │ X · · │ · X ·\n  9 · · · │ · O · │ · · ·\n  next player: O\n  constraint: 1\n  supergame:\n  • · ·\n  X X ·\n  O · ·\n  result: In Game\n)"
  },
  {
    "objectID": "Game/about.html",
    "href": "Game/about.html",
    "title": "About",
    "section": "",
    "text": "Ultimate Tic Tac Toe is a variant of the classic game of Tic Tac Toe, with an added layer of complexity and strategy.",
    "crumbs": [
      "Game",
      "About"
    ]
  },
  {
    "objectID": "Game/about.html#objective",
    "href": "Game/about.html#objective",
    "title": "About",
    "section": "Objective",
    "text": "Objective\nThe objective of Ultimate Tic Tac Toe is the same as regular Tic Tac Toe: to get three of your symbols in a row, horizontally, vertically, or diagonally, on a 3x3 grid.",
    "crumbs": [
      "Game",
      "About"
    ]
  },
  {
    "objectID": "Game/about.html#gameplay",
    "href": "Game/about.html#gameplay",
    "title": "About",
    "section": "Gameplay",
    "text": "Gameplay\n\nUltimate Tic Tac Toe is played on a 3x3 grid of Tic Tac Toe boards.\nEach of the 9 cells in the grid represents a smaller Tic Tac Toe board.\nPlayers take turns placing their symbols (traditionally ‘X’ and ‘O’) in any available cell within the active board.\nThe active board is determined by the opponent’s previous move.\nTo win the game, a player must win three small Tic Tac Toe boards in a row.",
    "crumbs": [
      "Game",
      "About"
    ]
  },
  {
    "objectID": "Game/about.html#rules",
    "href": "Game/about.html#rules",
    "title": "About",
    "section": "Rules",
    "text": "Rules\n\nPlayers take turns placing their symbols (‘X’ or ‘O’) on the grid.\nThe first player to get three of their symbols in a row on any small board wins that board.\nThe winning player then selects a cell on the large grid corresponding to the small board they won.\nThe next player must place their symbol in the small board corresponding to the cell the previous player selected.\nIf a player’s move sends their opponent to a small board that has already been won, the opponent can choose to play in any open small board.\nThe game continues until one player wins three small boards in a row or the entire grid is filled without a winner.  &gt; Gif by Panmona",
    "crumbs": [
      "Game",
      "About"
    ]
  },
  {
    "objectID": "Game/about.html#strategy",
    "href": "Game/about.html#strategy",
    "title": "About",
    "section": "Strategy",
    "text": "Strategy\n\nPlayers must think strategically to not only win small boards but also to strategically position themselves to win the overall game.\nIt’s important to block opponents from winning small boards while also aiming to win them yourself.\nPlayers should also consider the implications of their moves on the larger grid.\n\nUltimate Tic Tac Toe adds a layer of depth and strategy to the classic game, making it an engaging and challenging experience for players of all ages.",
    "crumbs": [
      "Game",
      "About"
    ]
  },
  {
    "objectID": "Python implementation/move.html",
    "href": "Python implementation/move.html",
    "title": "Move",
    "section": "",
    "text": "source\n\nMove\n\n Move (symbol:int, index:int)\n\nA move contains the symbol (represented as an int) and the index (int from 0 to 80) where the symbol will be placed.\n\n\n\n\nType\nDetails\n\n\n\n\nsymbol\nint\nX_STATE_VALUE = 1 or O_STATE_VALUE = 2\n\n\nindex\nint\nint from 0 to 80\n\n\n\n\nmove = Move(1, 55)\nprint(move)\n\nMove(symbol=X, index=55)",
    "crumbs": [
      "Python implementation",
      "Move"
    ]
  },
  {
    "objectID": "Python implementation/showcase.html",
    "href": "Python implementation/showcase.html",
    "title": "Showcase",
    "section": "",
    "text": "import alphaUltimateTTT.UltimateTicTacToe as game",
    "crumbs": [
      "Python implementation",
      "Showcase"
    ]
  },
  {
    "objectID": "Python implementation/showcase.html#game-initialization",
    "href": "Python implementation/showcase.html#game-initialization",
    "title": "Showcase",
    "section": "Game initialization",
    "text": "Game initialization\n\nuttt = game.UltimateTicTacToe()\nprint(uttt)\n\nUltimateTicTacToe(\n  subgames:\n    1 2 3   4 5 6   7 8 9\n  1 • • • │ • • • │ • • •\n  2 • • • │ • • • │ • • •\n  3 • • • │ • • • │ • • •\n    —————————————————————\n  4 • • • │ • • • │ • • •\n  5 • • • │ • • • │ • • •\n  6 • • • │ • • • │ • • •\n    —————————————————————\n  7 • • • │ • • • │ • • •\n  8 • • • │ • • • │ • • •\n  9 • • • │ • • • │ • • •\n  next player: X\n  constraint: None\n  supergame:\n  • • •\n  • • •\n  • • •\n  result: In Game\n)\n\n\n\nAt the beggining, there is no constraint on which subgame to play. But after the first move, this changes.\n\nuttt.play(55)\n\nUltimateTicTacToe(\n  subgames:\n    1 2 3   4 5 6   7 8 9\n  1 · · · │ · · · │ · · ·\n  2 · · · │ · · · │ · · ·\n  3 · · · │ · · · │ · · ·\n    —————————————————————\n  4 · · · │ • • • │ · · ·\n  5 · · · │ • X • │ · · ·\n  6 · · · │ • • • │ · · ·\n    —————————————————————\n  7 · · · │ · · · │ · · ·\n  8 · · · │ · · · │ · · ·\n  9 · · · │ · · · │ · · ·\n  next player: O\n  constraint: 5\n  supergame:\n  · · ·\n  · • ·\n  · · ·\n  result: In Game\n)\n\n\n\nuttt.play(44)\n\nUltimateTicTacToe(\n  subgames:\n    1 2 3   4 5 6   7 8 9\n  1 • • • │ · · · │ · · ·\n  2 • • • │ · · · │ · · ·\n  3 • • • │ · · · │ · · ·\n    —————————————————————\n  4 · · · │ O · · │ · · ·\n  5 · · · │ · X · │ · · ·\n  6 · · · │ · · · │ · · ·\n    —————————————————————\n  7 · · · │ · · · │ · · ·\n  8 · · · │ · · · │ · · ·\n  9 · · · │ · · · │ · · ·\n  next player: X\n  constraint: 1\n  supergame:\n  • · ·\n  · · ·\n  · · ·\n  result: In Game\n)\n\n\n\n\nYou can’t play outside of the constrained subgame\n\ntry:\n    uttt.play(45)\nexcept Exception as e:\n    print(e)\n\nIllegal move Move(symbol=X, index=37) - violated constraint = 0\n\n\n\nuttt.play(22)\n\nUltimateTicTacToe(\n  subgames:\n    1 2 3   4 5 6   7 8 9\n  1 · · · │ · · · │ · · ·\n  2 · X · │ · · · │ · · ·\n  3 · · · │ · · · │ · · ·\n    —————————————————————\n  4 · · · │ O • • │ · · ·\n  5 · · · │ • X • │ · · ·\n  6 · · · │ • • • │ · · ·\n    —————————————————————\n  7 · · · │ · · · │ · · ·\n  8 · · · │ · · · │ · · ·\n  9 · · · │ · · · │ · · ·\n  next player: O\n  constraint: 5\n  supergame:\n  · · ·\n  · • ·\n  · · ·\n  result: In Game\n)\n\n\n\n\nYou can’t play on a square already played:\n\ntry:\n    uttt.play(44)\nexcept Exception as e:\n    print(e)\n\nIllegal move Move(symbol=O, index=36) - index already taken\n\n\n\n\nThe game is completely determined by its state\n\nstate = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 2, 1, 0, 2, 0, 0, 0, 0, 1, 2, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 2, 0, 0, 1, 5, 0]\nuttt = game.UltimateTicTacToe(state=state)\nprint(uttt)\n\nUltimateTicTacToe(\n  subgames:\n    1 2 3   4 5 6   7 8 9\n  1 · · · │ · · · │ · · ·\n  2 · · · │ O · · │ O O ·\n  3 · · · │ · · · │ · · ·\n    —————————————————————\n  4 · · X │ · · X │ • • •\n  5 · X · │ · X O │ • X O\n  6 X · · │ X · O │ X • •\n    —————————————————————\n  7 · · · │ · · · │ · · ·\n  8 O O O │ X · · │ · X ·\n  9 · · · │ · O · │ · · ·\n  next player: X\n  constraint: 6\n  supergame:\n  · · ·\n  X X •\n  O · ·\n  result: In Game\n)\n\n\n\nuttt.play(57)\n\nUltimateTicTacToe(\n  subgames:\n    1 2 3   4 5 6   7 8 9\n  1 • • • │ • • • │ • • •\n  2 • • • │ O • • │ O O •\n  3 • • • │ • • • │ • • •\n    —————————————————————\n  4 · · X │ · · X │ • • •\n  5 · X · │ · X O │ X X O\n  6 X · · │ X · O │ X • •\n    —————————————————————\n  7 · · · │ • • • │ • • •\n  8 O O O │ X • • │ • X •\n  9 · · · │ • O • │ • • •\n  next player: O\n  constraint: None\n  supergame:\n  • • •\n  X X •\n  O • •\n  result: In Game\n)\n\n\n\n\nThe only available squares are those from subgames still on game\n\nuttt.play(29)\n\nUltimateTicTacToe(\n  subgames:\n    1 2 3   4 5 6   7 8 9\n  1 · · · │ · · · │ · · ·\n  2 · · · │ O · · │ O O O\n  3 · · · │ · · · │ · · ·\n    —————————————————————\n  4 · · X │ · · X │ • • •\n  5 · X · │ · X O │ X X O\n  6 X · · │ X · O │ X • •\n    —————————————————————\n  7 · · · │ · · · │ · · ·\n  8 O O O │ X · · │ · X ·\n  9 · · · │ · O · │ · · ·\n  next player: X\n  constraint: 6\n  supergame:\n  · · O\n  X X •\n  O · ·\n  result: In Game\n)\n\n\n\nuttt.play(47)\n\nThe game is over\nX is the winner\nUltimateTicTacToe(\n  subgames:\n    1 2 3   4 5 6   7 8 9\n  1 · · · │ · · · │ · · ·\n  2 · · · │ O · · │ O O O\n  3 · · · │ · · · │ · · ·\n    —————————————————————\n  4 · · X │ · · X │ X · ·\n  5 · X · │ · X O │ X X O\n  6 X · · │ X · O │ X · ·\n    —————————————————————\n  7 · · · │ · · · │ · · ·\n  8 O O O │ X · · │ · X ·\n  9 · · · │ · O · │ · · ·\n  supergame:\n  · · O\n  X X X\n  O · ·\n  result: X won\n)\n\n\n\n\nYou can’t play once the game is over\n\ntry:\n    uttt.play(58)\nexcept Exception as e:\n    print(e)\n\nIllegal move Move(symbol=O, index=49) - The game is over",
    "crumbs": [
      "Python implementation",
      "Showcase"
    ]
  },
  {
    "objectID": "Python implementation/showcase.html#problems-to-be-solved",
    "href": "Python implementation/showcase.html#problems-to-be-solved",
    "title": "Showcase",
    "section": "Problems to be solved",
    "text": "Problems to be solved",
    "crumbs": [
      "Python implementation",
      "Showcase"
    ]
  }
]